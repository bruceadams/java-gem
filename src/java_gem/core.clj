(ns java-gem.core
  (:gen-class)
  (:require [cemerick.pomegranate.aether :as aether]
            [fs.core :as fs]
            [clojure.tools.cli :as cli] ; missing dependencies
            [clojure.java.io :as io]
            [clojure.string :as string]))

(import '(org.jruby.embed ScriptingContainer LocalContextScope))
(def c (ScriptingContainer. LocalContextScope/THREADSAFE))

(defn parse-args
  "Parse command line arguments"
  [raw-args]
  (let [[options args banner]
        (cli/cli raw-args
                 ["-h" "--help" "Show help" :default false :flag true]
                 ["-g" "--group" "Maven group identifier of Java library"]
                 ["-n" "--name" "Name of Java library"]
                 ["-o" "--output" "Directory to write the Ruby Gem into"
                  :default "."]
                 ["-r" "--repository" "Extra Maven repository URL to read from"]
                 ["-u" "--uber-gem" (str "Create a single gem containing"
                                         " all of the Java dependencies")
                  :default false :flag true]
                 ["-v" "--version" "Version of Java library"])]
    (when (:help options)
      (println banner)
      (System/exit 0))
    options))

(defn copy-files
  [files target]
  (doseq [f files]
    (io/copy f (io/file target (.getName f)))))

(defn today
  "Today's date, formatted"
  []
  (.format (java.text.SimpleDateFormat. "yyyy-MM-dd") (java.util.Date.)))

(defn ruby-const
  "Return a Ruby formatted constant."
  [x]
  (if (seq? x)
    (str "[\"" (string/join "\", \"" x) "\"]")
    (pr-str x)))

(defn gemify-version
  "Modify a Maven legal version string into a Ruby Gem legal version string."
  [version]
  (string/replace version "-" "."))

(defn gemspec-str
  "Return a Gem::Specification block of Ruby code."
  [{:keys [group name version output]}]
  (let [data {:name          name
              :version       (gemify-version version)
              :authors       ["unknown"]
              :date          (today)
              :platform      "java"
              :summary       (str "RubyGem wrapper for Java package " name)
              :description   (str "Autogenerated RubyGem wrapper for "
                                  group "/" name "-" version)
              :homepage      "https://github.com/bruceadams/java-gem"
              :files         (for [f (.listFiles (io/file output "lib"))]
                               (str "lib/" (.getName f)))
              :require_paths ["lib"]}]
    (format "Gem::Specification.new do |s|\n%send\n"
            (apply str (for [i data] (format "  s.%s = %s\n"
                                             (.getName (first i))
                                             (ruby-const (last i))))))))

(defn ruby-require
  "Ruby code to require each file"
  [files]
  (str (string/join "\n" (map #(str "require '" (.getName %) "'") files))
       "\n"))

(defn generate-uber-gem
  ""
  [{:keys [name output] :as options}
   dependencies]
  (let [gemspec-file (io/file output (str name ".gemspec"))
        libdir (io/file output "lib")
        jars (aether/dependency-files dependencies)]
    (fs/delete-dir libdir)
    (.mkdir libdir)
    (with-open [f (io/writer (io/file libdir (str name ".rb")))]
      (.write f (ruby-require jars)))
    (copy-files jars libdir)
    (with-open [f (io/writer gemspec-file)]
      (.write f (gemspec-str options)))
    (. c runScriptlet
       (str "require 'rubygems';"
            "require 'rubygems/gem_runner';"
            "Dir.chdir '" output "';"
            "Gem::GemRunner.new.run ['build', '" gemspec-file "']"))))

(defn generate-skinny-gem
  ""
  [options dependencies]
  (throw (Exception. "uber-gem is currently required. Sorry about that!")))

(defn -main
  "Generate a Ruby Gem."
  [& raw-args]
  (let [{:keys [name group repository version uber-gem] :as options}
          (parse-args raw-args)
        coordinates [[(symbol (str group "/" name))
                      version]]
        dependencies (aether/resolve-dependencies
                      :coordinates coordinates
                      :repositories repository)]
    (if uber-gem
      (generate-uber-gem   options dependencies)
      (generate-skinny-gem options dependencies))))
